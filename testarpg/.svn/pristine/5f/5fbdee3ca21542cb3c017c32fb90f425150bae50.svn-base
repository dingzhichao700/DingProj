
module egret {

	export class SceneData{
		/**********************以下为通用场景数据***********************/
		/**
		 * 当前场景类型 
		 */		
		public sceneType:number = 0;
		/**
		 * 当前场景 id，包括所有类型场景 
		 */		
		public sceneId:number = 0;
		/**********************以下为城市场景数据***********************/
		/**
		 * 当前城市场景基础 id
		 */		
		public cityId:number = 0;
		/**
		 * 动态场景元素数据表 
		 */		
		public dynamicElementsMap:HashMap = null;
		/**
		 * 是否已切换场景 
		 */		
		public isChanged:boolean = false;
		/**
		 * 玩家是否可视
		 */		
		public playerVisible:boolean = true;
		
		//元素管理器
		public _sceneElementManager:SceneElementManager = null;
		
		//场景固定元素表(分场景，类型)
		private _fixedElementMap:HashMap = null;
		//场景固定元素id表(id为键)
		private _fixedEleIdMap:HashMap = null;
		//场景网络
		private _netMap:HashMap = null;
		//场景传送点数据表
		private _entryPointMap:HashMap = null;
		/**
		 * 普通副本怪物数据
		 */
		private _normalMonsterList:Array<SceneElementDataItem>;
		/**
		 * Boss副本怪物数据
		 */
		private _bossMonsterList:Array<SceneElementDataItem>;
		/**
		 * 怪物出生点缓存
		 */
		private _bornPoint:Point;

		/**
		 * 构造函数
		 */
		public constructor(){
			this._bornPoint = new egret.Point();

			this.dynamicElementsMap = new HashMap();
			
			this._fixedElementMap = new HashMap();
			this._fixedEleIdMap = new HashMap();
			
			this._netMap = new HashMap();

			this._normalMonsterList = [];
			this._bossMonsterList = [];
		}
		//
		public checkArmy():boolean{
			var list:Array<SceneElementDataItem>;
			switch (this.sceneType){
				case SceneType.CITY:
					list = this._normalMonsterList;
					break;
				case  SceneType.SIEGE:
					list = this._bossMonsterList;
					break;
			}

			for(var i in list){
				if(list[i] && list[i].vo && list[i].vo["hp"] > 0){
					return true;
				}
			}

			return false;
		}
		//
		public getArmies():Array<SceneElementDataItem>{
			var list:Array<SceneElementDataItem>;
			switch (this.sceneType){
				case SceneType.CITY:
					list = this.getNormalMonsterList(1);
					break;
				case  SceneType.SIEGE:
					list = this.getBossMonsterList(1);
					break;
			}

			return list;
		}
		//
		public getNormalMonsterList(copyId:number):Array<SceneElementDataItem>{
			var point:Point = this.getBornPoint();

			for(var i:number = 0; i < 3; i++){
				var item:SceneElementDataItem = this._normalMonsterList[i];

				if(!item){
					item = new egret.SceneElementDataItem();
					this._normalMonsterList[i] = item;
				}

				if(!item.vo){
					item.vo = new SceneMonsterVo();
					item.vo.id = SceneElementData.getInstance().getAutoElementId();
					item.vo.idString = item.vo.id + "";
				}

				item.vo.x = point.x + Math.random() * 300 - 150;
				item.vo.y = point.y +Math.random() * 300 - 150;
				(<SceneMonsterVo>item.vo).hp = 200;
				(<SceneMonsterVo>item.vo).hpTotal = 200;

				if(!item.lo){
					item.lo = new MonsterLo();
					item.lo.movieName = "monster_001";
				}
			}

			return this._normalMonsterList;
		}
		//
		public getBossMonsterList(copyId:number):Array<SceneElementDataItem>{
			return this._bossMonsterList;
		}
		//
		public getBornPoint():Point{
			var index:number = Math.floor(Math.random() * 8);
			var radian:number = Math.PI / 4 * index;
			var cx:number = 1200 / 2;
			var cy:number = 1800 / 2;
			var radius:number = cx > cy ? cy : cx;
			radius *= 2/3;

			this._bornPoint.x = Math.cos(radian) * radius + cx;
			this._bornPoint.y = Math.sin(radian) * radius + cy;

			return this._bornPoint;
		}
		//
		public resetRoleData():void{
			(<SceneDriverVo>Role.getInstance().data.vo).hp = (<SceneDriverVo>Role.getInstance().data.vo).hpTotal = 1000;
		}
		//
		/**
		 * 获取当前场景元素的坐标点 
		 * @param id:Number vo.id或lo.id
		 * @return 返回Point(0,0)表示未找到
		 * 
		 */		
		public getElementPoint(id:number):Point{
			
			var item:SceneElementDataItem = this.getElementDataItem(<number><any> id);
			if(item && item.vo && 
				item.vo.x > 0 && item.vo.y > 0){
				
				var point:Point = new Point();
				point.x = item.vo.x;
				point.y = item.vo.y;
			}else{
				var lo:SceneElementLo = this.getFixedElementLoById(<number><any> id);
				if(lo){
					point = lo.point;
				}else{
					LogManager.error(this,"找不到场景元素的坐标点: id = " + id);
				}
			}
			
			return point;
		}
		//
		/**
		 * 检测是否已到达传送点范围 
		 * @param x:Number 角色x坐标
		 * @param y:Number 角色y坐标
		 * @return 未到达任何传送点时返回 null
		 * 
		 */		
		public checkEntryPoint(x:number,y:number):EntryPointLo{
			if(!this._entryPointMap){
				this._entryPointMap = new HashMap();
				
				var array:Array<any> = null;
				var map:HashMap = LocalData.getInstance().getHashMap(LocalDataFileName.ENTER_POINT);
				
				var length:number = map.content.length;
				for(var i:number = 0;i < length;i++){
					var entryPointLo:EntryPointLo = map.content[i];
					array = this._entryPointMap.get(entryPointLo.sceneId);
					if(!array){
						array = [];
						this._entryPointMap.put(entryPointLo.sceneId,array);
					}
					
					array.push(entryPointLo);
				}
			}
			
			array = this._entryPointMap.get(dataManager().sceneData.cityId);
			
			var point:Point = new Point(x,y);
			var length1:number = array.length;
			for(var i1:number = 0;i1 < length1;i1++){
				entryPointLo = array[i1];
				if(Point.distance(point,entryPointLo.point) <= SceneElementData.ENTRY_POINT_RADIUS){
					return entryPointLo;
				}
			}
			
			return null;
		}
		//
		/**
		 * 获取动态元素数据 
		 * @param id:Number 元素vo.id
		 * @return 
		 * 
		 */		
		public getElementDataItem(id:number):SceneElementDataItem{
			return this.dynamicElementsMap.get(id);
		}
		//
		/**
		 * 获取静态场景元素数据 
		 * @param id:Number 场景元素id
		 * @param id:int = -1 场景id，-1表示当前场景
		 * @return 
		 * 
		 */		
		public getFixedElementLo(type:number,id:number,sceneId:number = -1):SceneElementLo{
			var eleMap:HashMap = this.getFixedElementMap(sceneId);
			var subMap:HashMap = eleMap.get(type);
			
			return subMap.get(id);
		}
		//
		/**
		 * 获取静态场景元素数据 
		 * @param id:Number 场景元素id
		 * @return 
		 * 
		 */	
		public getFixedElementLoById(id:number):SceneElementLo{
			return this._fixedEleIdMap.get(id);
		}
		//
		/**
		 * 场景固定元素表 
		 * @param id:int = -1 场景id，-1表示当前场景
		 * @return 
		 * 
		 */		
		public getFixedElementMap(id:number = -1):HashMap{
			if(id == -1)
				id = this.cityId;
			
			return this._fixedElementMap.get(id);
		}
		//
		/**
		 * 添加多个动态场景元素数据 
		 * @param array:Array 场景元素vo数组
		 * 
		 */
		public addElementDataItemByVoArray(array:Array<any>):void{
			var length:number = array.length;
			for(var i:number = 0;i < length;i++){
				var vo:SceneElementVo = array[i];
				this.addElementDataItemByVo(vo);
			}
		}
		//
		/**
		 * 添加动态场景元素数据 
		 * @param vo:SceneElementVo 场景元素vo
		 * 
		 */
		public addElementDataItemByVo(vo:SceneElementVo):SceneElementDataItem{
			if(this.dynamicElementsMap.containsKey(vo.id)){
				LogManager.error(this,"动态场景元素数据重复: id = " + vo.id);
			}else{
				var item:SceneElementDataItem = new SceneElementDataItem();
				item.vo = vo;
				vo.idString = vo.id + "";
				this.dynamicElementsMap.put(vo.id,item);
			}
			
			return item;
		}
		//
		/**
		 * 移除动态元素数据 
		 * @param item:SceneElementDataItem
		 * 
		 */		
		public removeElementDataItem(item:SceneElementDataItem):void{
			this.dynamicElementsMap.remove(item.vo.id);
		}
		//
		/**
		 * 移除动态元素数据 
		 * @param id:Number
		 * 
		 */
		public removeElementDataItemById(id:number):void{
			this.dynamicElementsMap.remove(id);
		}
		//
		/**
		 * 更新场景元素vo 
		 * @param item:SceneElementDataItem 数据
		 * @param attr:Array 属性列表
		 * @param values:Array 值列表
		 * 
		 */		
		public updateSceneElementVo(item:SceneElementDataItem,attr:Array<any>,values:Array<any>):void{
			if(!item.vo) return;
			
			for(var p in attr){
				item.vo[attr[p]] = values[p];
			}
		}
		//
		/**
		 * 更新场景元素vo 
		 * @param item:SceneElementDataItem 数据
		 * @param attr:Array 属性列表
		 * @param values:Array 值列表
		 * 
		 */		
		public updateSceneElementVo2(userId:number,data:any):void{
			var item:SceneElementDataItem = this.getElementDataItem(userId);
			if(!item.vo) return;
			
			for(var p in data){
				item.vo[p] = data[p];
			}
		}
		//
		/**
		 * 获取场景元素类型 
		 * @param lo:SceneElementLo 元素lo
		 * @return 
		 * 
		 */		
		public getElementType(lo:SceneElementLo):number{
			if(lo instanceof NpcLo){
				return SceneElementType.NPC;
			}else if(lo instanceof EntryPointLo){
				return SceneElementType.ENTRY_POINT;
			}
			return 0;
		}
		//
		/**
		 * 查找导航路径，此方法为每个地图都有传送另一个地图的传送点时的跨场景导航功能，需要构建相应的地图树结构
		 * @param beginId:int 场景起始id
		 * @param sceneId:int 场景目标id
		 * @param elementId:int = -1 场景固定元素id，指定此参数时x,y无效
		 * @param x:int = -1 场景目标点x
		 * @param y:int = -1 场景目标点y 
		 * @return 
		 * 
		 */		
		public searchPath(beginId:number,sceneId:number,elementId:number = -1,x:number = -1,y:number = -1):Array<any>{
			if(!this._netMap.containsKey(sceneId)){
				LogManager.error(this,"场景id无效: sceneId = " + sceneId);
				return [];
			}
			
			var pathItems:Array<any> = [];
			
			var currentNetItem:SceneNetDataItem = this._netMap.get(beginId);
			
			pathItems.push(new TreePathItem(currentNetItem));
			
			var parentItem:TreePathItem = null;
			var isFound:boolean = false;
			//标记已考察场景
			var flagMap:HashMap = new HashMap();
			
			flagMap.put(currentNetItem.id,true);
			
			//在场景树中查找路径
			while(pathItems.length > 0){
				parentItem = pathItems.shift();
				
				currentNetItem = <SceneNetDataItem><any> (parentItem.data);
				
				if(currentNetItem.id == sceneId){
					isFound = true;
					break;
				}
				//当前场景可传送场景
				var length1:number = currentNetItem.entrySceneItems.length;
				for(var i1:number = 0;i1 < length1;i1++){
					var netItem:SceneNetDataItem = currentNetItem.entrySceneItems[i1];
					if(!flagMap.containsKey(netItem.id)){
						pathItems.push(new TreePathItem(netItem,parentItem));
						flagMap.put(netItem.id,true);
					}
				}
			}
			
			pathItems.length = 0;
			
			//逆向取出路径点
			if(isFound){
				pathItems.push(parentItem.data);
				
				while(parentItem.parent){
					pathItems.push(parentItem.parent.data);
					
					parentItem = parentItem.parent;
				}
				
				if(pathItems.length > 1){
					pathItems.reverse();
				}
			}
			
			var result:Array<any> = [];
			//当前场景传送点
			var currentEPs:Array<any> = [];
			//下一场景传送点
			var nextEPs:Array<any> = [];
			//下一场景出生点
			var nextBPs:Array<any> = [];
			var length:number = pathItems.length - 1;
			var nextNetItem:SceneNetDataItem = null;
			var lastNetItem:SceneNetDataItem = null;
			var eleLo:SceneElementLo = this.getFixedElementLoById(elementId);
			//同一场景中有多个传送点和出生点时，最短路径的出生点的传送点lo
			var minArray:Array<any> = [];
			var naviItem:SceneNavigatorDataItem = null;
			//标记查找剩余一个场景
			var isEnd:boolean = false;
			
			for(var i:number = 0; i < length; i++){
				currentEPs.length = 0;
				nextBPs.length = 0;
				nextEPs.length = 0;
				lastNetItem = null;
				
				currentNetItem = pathItems[i];
				nextNetItem = pathItems[i + 1];
				
				if(i + 2 <= length)
					lastNetItem = pathItems[i + 2];
				
				//取出通往下一场景传送点和下一场景的出生点
				var length2:number = currentNetItem.enterPoints.length;
				for(var i2:number = 0;i2 < length2;i2++){
					var lo:EntryPointLo = currentNetItem.enterPoints[i2];
					if(lo.entryId == nextNetItem.id){
						currentEPs.push(lo);
						
						nextBPs.push(LocalData.getInstance().getRoleBornPointLo(lo.roleBornPointId));
					}
				}
				
				//超出2个场景时，需要计算第2个场景中出生点和通往第3个场景的传送点的最短路径出生点和传送点
				if(lastNetItem){
					var length3:number = nextNetItem.enterPoints.length;
					for(var i3:number = 0;i3 < length3;i3++){
						lo = nextNetItem.enterPoints[i3];
						if(lo.entryId == lastNetItem.id){
							nextEPs.push(lo);
						}
					}
					
					var distance:number = 0;
					var min:number = Number.POSITIVE_INFINITY;
					//找出最短路径出生点和传送点
					var length4:number = nextBPs.length;
					for(var i4:number = 0;i4 < length4;i4++){
						var rbpLo:RoleBornPointLo = nextBPs[i4];
						var length5:number = nextEPs.length;
						for(var i5:number = 0;i5 < length5;i5++){
							lo = nextEPs[i5];
							distance = Point.distance(lo.point,rbpLo.point);
							if(distance < min){
								//出生点
								minArray[0] = rbpLo;
								//传送点
								minArray[1] = lo;
								
								min = distance;
							}
						}
					}
					//当前场景传送点
					var length6:number = currentEPs.length;
					for(var i6:number = 0;i6 < length6;i6++){
						lo = currentEPs[i6];
						if(lo.roleBornPointId == minArray[0].id){
							naviItem = new SceneNavigatorDataItem();
							naviItem.sceneId = currentNetItem.id;
							naviItem.elementId = lo.id;
							
							result.push(naviItem);
							break;
						}
					}
					//下一场景传送点
					naviItem = new SceneNavigatorDataItem();
					naviItem.sceneId = nextNetItem.id;
					naviItem.elementId = minArray[1].id;
					result.push(naviItem);
					
					//每取出2个场景的路径，i 要增加
					i ++;
				}else{
					isEnd = true;
				}
			}
			
			var hasCoor:boolean = false;
			if(eleLo){
				var point:Point = eleLo.point;
			}else{
				if(x != -1 && y != -1){
					var xx:number = x;
					var yy:number = y;
					hasCoor = true;
				}else if(isEnd && nextBPs[0]){
					//没有目标元素和坐标点时，取场景的出生点
					xx = nextBPs[0].point.x;
					yy = nextBPs[0].point.y;
					hasCoor = true;
				}
				point = new Point(xx,yy);
			}
			//剩余最后一个场景时
			if(isEnd){
				distance = 0;
				min = Number.POSITIVE_INFINITY;
				
				//取出距离目标点最近的出生点
				var length7:number = nextBPs.length;
				for(var i7:number = 0;i7 < length7;i7++){
					rbpLo = nextBPs[i7];
					distance = Point.distance(point,rbpLo.point);
					if(distance < min){
						minArray[0] = rbpLo;
						
						min = distance;
					}
				}
				//取出到达最后一个出生点传送点
				var length8:number = currentEPs.length;
				for(var i8:number = 0;i8 < length8;i8++){
					lo = currentEPs[i8];
					if(lo.roleBornPointId == minArray[0].id){
						naviItem = new SceneNavigatorDataItem();
						naviItem.sceneId = currentNetItem.id;
						naviItem.elementId = lo.id;
						
						result.push(naviItem);
						break;
					}
				}
			}
			
			//目标点
			naviItem = new SceneNavigatorDataItem();
			naviItem.sceneId = sceneId;
			if(eleLo){
				naviItem.elementId = elementId;
				result.push(naviItem);
			}else if(hasCoor){
				naviItem.x = xx;
				naviItem.y = yy;
				result.push(naviItem);
			}
			
			return result;
		}
		//
		/**
		 * 清空场景数据 
		 * 
		 */		
		public clearData():void{
			this.dynamicElementsMap.clear();
		}
		//
		/**
		 * 构建场景树结构
		 * 
		 */		
		public buildFixedMap():void{
			var map:HashMap = LocalData.getInstance().getHashMap(LocalDataFileName.SCENE);
			var names:Array<any> = [
				LocalDataFileName.NPC,
//				LocalDataFileName.ENTER_POINT,
				LocalDataFileName.ROLE_BORN_POINT
			];
			var types:Array<any> = [
				SceneElementType.NPC,
//				SceneElementType.ENTRY_POINT,
				SceneElementType.ROLE_BORN_POINT
			];
			
			//分场景
			var sceneMap:HashMap = null;
			var netItem:SceneNetDataItem = null;
			
			var length1:number = map.content.length;
			for(var i1:number = 0;i1 < length1;i1++){
				var sceneLo:SceneLo = map.content[i1];
				sceneMap = new HashMap();
				
				this._fixedElementMap.put(sceneLo.id,sceneMap);
				
				netItem = new SceneNetDataItem();
				netItem.id = sceneLo.id;
				this._netMap.put(sceneLo.id,netItem);
				
				var length2:number = types.length;
				for(var i2:number = 0;i2 < length2;i2++){
					var type:any = types[i2];
					sceneMap.put(type,new HashMap());
				}
			}
			
			//分类型
			for(var i in names){
				this.buildMap(names[i],types[i]);
			}
			
			//构建场景传送网络
//			var loMap:HashMap = LocalData.getInstance().getHashMap(LocalDataFileName.ENTER_POINT);
//			var entryItem:SceneNetDataItem = null;
//			
//			for each(var lo:EntryPointLo in loMap.content){
//				netItem = _netMap.get(lo.sceneId);
//				entryItem = _netMap.get(lo.entryId);
//				
//				if(netItem.entrySceneItems.indexOf(entryItem) == -1)
//					netItem.entrySceneItems.push(entryItem);
//				netItem.enterPoints.push(lo);
//			}
		}
		//
		/**
		 * 构建指定表元素 
		 * @param fileName
		 * @param type
		 * 
		 */		
		private buildMap(fileName:string,type:number = 0):void{
			var loMap:HashMap = LocalData.getInstance().getHashMap(fileName);
			var map:HashMap = null;
			var eleMap:HashMap = null;
			
			var length:number = loMap.content.length;
			for(var i:number = 0;i < length;i++){
				var lo:SceneElementLo = loMap.content[i];
				map = this._fixedElementMap.get(lo.sceneId);
				eleMap = map.get(type);
				eleMap.put(lo.id,lo);
				
				if(this._fixedEleIdMap.containsKey(lo.id)){
					LogManager.error(this,"固定场景元素id重复: fileName = " + fileName + ",type = " + type + ",id = " + lo.id);
				}else{
					this._fixedEleIdMap.put(lo.id,lo);
				}
			}
		}
		//
		/**
		 * 获取场景传送点基础数据 
		 * @param sceneId:int 传送点所在场景基础 id
		 * @param entryId:int 传送点传送的场景基础 id
		 * @return 
		 * 
		 */		
		public getEntryPointLoBySceneId(sceneId:number,entryId:number = 0):EntryPointLo{
			var map:HashMap = LocalData.getInstance().getHashMap(LocalDataFileName.ENTER_POINT);
			
			var length:number = map.content.length;
			for(var i:number = 0;i < length;i++){
				var lo:EntryPointLo = map.content[i];
				if(lo.sceneId == sceneId && lo.entryId == entryId){
					return lo;
				}
			}
			
			LogManager.error(this,"找不到场景传送点数据: sceneId = " + sceneId + ", entryId = " + entryId);
			
			return null;
		}
		//
		/**
		 * 通过固定场景元素id获取场景id 
		 * @param elementId:int 固定场景元素id
		 * @return 
		 * 
		 */		
		public getSceneIdByElement(elementId:number = 0):number{
			var lo:SceneElementLo = this.getFixedElementLoById(elementId);
			
			if(lo)
				return lo.sceneId;
			
			LogManager.error(this,"找不到场景id: elementId = " + elementId);
			
			return 0;
		}
		//
		/**
		 * 获取指定城市中的 npc 数据 
		 * @param cityId:int = -1 城市 id
		 * @return 
		 * 
		 */		
		public getCityNpcs(cityId:number = -1):Array<any>{
			if(cityId == -1)
				cityId = this.cityId;
			
			var hashMap:HashMap = LocalData.getInstance().getHashMap(LocalDataFileName.NPC);
			
			var array:Array<any> = [];
			
			var length:number = hashMap.content.length;
			for(var i:number = 0;i < length;i++){
				var lo:NpcLo = hashMap.content[i];
				if(lo.sceneId == cityId){
					array.push(lo);
				}
			}
			
			return array;
		}

	}
}