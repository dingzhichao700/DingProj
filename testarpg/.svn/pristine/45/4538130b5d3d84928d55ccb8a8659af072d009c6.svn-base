var egret;
(function (egret) {
    var SceneData = (function () {
        /**
         * 构造函数
         */
        function SceneData() {
            /**********************以下为通用场景数据***********************/
            /**
             * 当前场景类型
             */
            this.sceneType = 0;
            /**
             * 当前场景 id，包括所有类型场景
             */
            this.sceneId = 0;
            /**********************以下为城市场景数据***********************/
            /**
             * 当前城市场景基础 id
             */
            this.cityId = 0;
            /**
             * 动态场景元素数据表
             */
            this.dynamicElementsMap = null;
            /**
             * 是否已切换场景
             */
            this.isChanged = false;
            /**
             * 玩家是否可视
             */
            this.playerVisible = true;
            //元素管理器
            this._sceneElementManager = null;
            //场景固定元素表(分场景，类型)
            this._fixedElementMap = null;
            //场景固定元素id表(id为键)
            this._fixedEleIdMap = null;
            //场景网络
            this._netMap = null;
            //场景传送点数据表
            this._entryPointMap = null;
            this.dynamicElementsMap = new egret.HashMap();
            this._fixedElementMap = new egret.HashMap();
            this._fixedEleIdMap = new egret.HashMap();
            this._netMap = new egret.HashMap();
        }
        var __egretProto__ = SceneData.prototype;
        //
        /**
         * 改变玩家可视状态
         *
         */
        __egretProto__.chenagePlayerVisible = function () {
            this.playerVisible = !this.playerVisible;
        };
        //
        /**
         * 获取当前场景元素的坐标点
         * @param id:Number vo.id或lo.id
         * @return 返回Point(0,0)表示未找到
         *
         */
        __egretProto__.getElementPoint = function (id) {
            var item = this.getElementDataItem(id);
            if (item && item.vo && item.vo.x > 0 && item.vo.y > 0) {
                var point = new egret.Point();
                point.x = item.vo.x;
                point.y = item.vo.y;
            }
            else {
                var lo = this.getFixedElementLoById(id);
                if (lo) {
                    point = lo.point;
                }
                else {
                    egret.LogManager.error(this, "找不到场景元素的坐标点: id = " + id);
                }
            }
            return point;
        };
        //
        /**
         * 检测是否已到达传送点范围
         * @param x:Number 角色x坐标
         * @param y:Number 角色y坐标
         * @return 未到达任何传送点时返回 null
         *
         */
        __egretProto__.checkEntryPoint = function (x, y) {
            if (!this._entryPointMap) {
                this._entryPointMap = new egret.HashMap();
                var array = null;
                var map = egret.LocalData.getInstance().getHashMap(egret.LocalDataFileName.ENTER_POINT);
                var length = map.content.length;
                for (var i = 0; i < length; i++) {
                    var entryPointLo = map.content[i];
                    array = this._entryPointMap.get(entryPointLo.sceneId);
                    if (!array) {
                        array = [];
                        this._entryPointMap.put(entryPointLo.sceneId, array);
                    }
                    array.push(entryPointLo);
                }
            }
            array = this._entryPointMap.get(egret.dataManager().sceneData.cityId);
            var point = new egret.Point(x, y);
            var length1 = array.length;
            for (var i1 = 0; i1 < length1; i1++) {
                entryPointLo = array[i1];
                if (egret.Point.distance(point, entryPointLo.point) <= egret.SceneElementData.ENTRY_POINT_RADIUS) {
                    return entryPointLo;
                }
            }
            return null;
        };
        //
        /**
         * 获取动态元素数据
         * @param id:Number 元素vo.id
         * @return
         *
         */
        __egretProto__.getElementDataItem = function (id) {
            return this.dynamicElementsMap.get(id);
        };
        //
        /**
         * 获取静态场景元素数据
         * @param id:Number 场景元素id
         * @param id:int = -1 场景id，-1表示当前场景
         * @return
         *
         */
        __egretProto__.getFixedElementLo = function (type, id, sceneId) {
            if (sceneId === void 0) { sceneId = -1; }
            var eleMap = this.getFixedElementMap(sceneId);
            var subMap = eleMap.get(type);
            return subMap.get(id);
        };
        //
        /**
         * 获取静态场景元素数据
         * @param id:Number 场景元素id
         * @return
         *
         */
        __egretProto__.getFixedElementLoById = function (id) {
            return this._fixedEleIdMap.get(id);
        };
        //
        /**
         * 场景固定元素表
         * @param id:int = -1 场景id，-1表示当前场景
         * @return
         *
         */
        __egretProto__.getFixedElementMap = function (id) {
            if (id === void 0) { id = -1; }
            if (id == -1)
                id = this.cityId;
            return this._fixedElementMap.get(id);
        };
        //
        /**
         * 添加多个动态场景元素数据
         * @param array:Array 场景元素vo数组
         *
         */
        __egretProto__.addElementDataItemByVoArray = function (array) {
            var length = array.length;
            for (var i = 0; i < length; i++) {
                var vo = array[i];
                this.addElementDataItemByVo(vo);
            }
        };
        //
        /**
         * 添加动态场景元素数据
         * @param vo:SceneElementVo 场景元素vo
         *
         */
        __egretProto__.addElementDataItemByVo = function (vo) {
            if (this.dynamicElementsMap.containsKey(vo.id)) {
                egret.LogManager.error(this, "动态场景元素数据重复: id = " + vo.id);
            }
            else {
                var item = new egret.SceneElementDataItem();
                item.vo = vo;
                vo.idString = vo.id + "";
                this.dynamicElementsMap.put(vo.id, item);
            }
            return item;
        };
        //
        /**
         * 移除动态元素数据
         * @param item:SceneElementDataItem
         *
         */
        __egretProto__.removeElementDataItem = function (item) {
            this.dynamicElementsMap.remove(item.vo.id);
        };
        //
        /**
         * 移除动态元素数据
         * @param id:Number
         *
         */
        __egretProto__.removeElementDataItemById = function (id) {
            this.dynamicElementsMap.remove(id);
        };
        //
        /**
         * 更新场景元素vo
         * @param item:SceneElementDataItem 数据
         * @param attr:Array 属性列表
         * @param values:Array 值列表
         *
         */
        __egretProto__.updateSceneElementVo = function (item, attr, values) {
            if (!item.vo)
                return;
            for (var p in attr) {
                item.vo[attr[p]] = values[p];
            }
        };
        //
        /**
         * 更新场景元素vo
         * @param item:SceneElementDataItem 数据
         * @param attr:Array 属性列表
         * @param values:Array 值列表
         *
         */
        __egretProto__.updateSceneElementVo2 = function (userId, data) {
            var item = this.getElementDataItem(userId);
            if (!item.vo)
                return;
            for (var p in data) {
                item.vo[p] = data[p];
            }
        };
        //
        /**
         * 获取场景元素类型
         * @param lo:SceneElementLo 元素lo
         * @return
         *
         */
        __egretProto__.getElementType = function (lo) {
            if (lo instanceof egret.NpcLo) {
                return egret.SceneElementType.NPC;
            }
            else if (lo instanceof egret.EntryPointLo) {
                return egret.SceneElementType.ENTRY_POINT;
            }
            return 0;
        };
        //
        /**
         * 查找导航路径，此方法为每个地图都有传送另一个地图的传送点时的跨场景导航功能，需要构建相应的地图树结构
         * @param beginId:int 场景起始id
         * @param sceneId:int 场景目标id
         * @param elementId:int = -1 场景固定元素id，指定此参数时x,y无效
         * @param x:int = -1 场景目标点x
         * @param y:int = -1 场景目标点y
         * @return
         *
         */
        __egretProto__.searchPath = function (beginId, sceneId, elementId, x, y) {
            if (elementId === void 0) { elementId = -1; }
            if (x === void 0) { x = -1; }
            if (y === void 0) { y = -1; }
            if (!this._netMap.containsKey(sceneId)) {
                egret.LogManager.error(this, "场景id无效: sceneId = " + sceneId);
                return [];
            }
            var pathItems = [];
            var currentNetItem = this._netMap.get(beginId);
            pathItems.push(new egret.TreePathItem(currentNetItem));
            var parentItem = null;
            var isFound = false;
            //标记已考察场景
            var flagMap = new egret.HashMap();
            flagMap.put(currentNetItem.id, true);
            while (pathItems.length > 0) {
                parentItem = pathItems.shift();
                currentNetItem = (parentItem.data);
                if (currentNetItem.id == sceneId) {
                    isFound = true;
                    break;
                }
                //当前场景可传送场景
                var length1 = currentNetItem.entrySceneItems.length;
                for (var i1 = 0; i1 < length1; i1++) {
                    var netItem = currentNetItem.entrySceneItems[i1];
                    if (!flagMap.containsKey(netItem.id)) {
                        pathItems.push(new egret.TreePathItem(netItem, parentItem));
                        flagMap.put(netItem.id, true);
                    }
                }
            }
            pathItems.length = 0;
            //逆向取出路径点
            if (isFound) {
                pathItems.push(parentItem.data);
                while (parentItem.parent) {
                    pathItems.push(parentItem.parent.data);
                    parentItem = parentItem.parent;
                }
                if (pathItems.length > 1) {
                    pathItems.reverse();
                }
            }
            var result = [];
            //当前场景传送点
            var currentEPs = [];
            //下一场景传送点
            var nextEPs = [];
            //下一场景出生点
            var nextBPs = [];
            var length = pathItems.length - 1;
            var nextNetItem = null;
            var lastNetItem = null;
            var eleLo = this.getFixedElementLoById(elementId);
            //同一场景中有多个传送点和出生点时，最短路径的出生点的传送点lo
            var minArray = [];
            var naviItem = null;
            //标记查找剩余一个场景
            var isEnd = false;
            for (var i = 0; i < length; i++) {
                currentEPs.length = 0;
                nextBPs.length = 0;
                nextEPs.length = 0;
                lastNetItem = null;
                currentNetItem = pathItems[i];
                nextNetItem = pathItems[i + 1];
                if (i + 2 <= length)
                    lastNetItem = pathItems[i + 2];
                //取出通往下一场景传送点和下一场景的出生点
                var length2 = currentNetItem.enterPoints.length;
                for (var i2 = 0; i2 < length2; i2++) {
                    var lo = currentNetItem.enterPoints[i2];
                    if (lo.entryId == nextNetItem.id) {
                        currentEPs.push(lo);
                        nextBPs.push(egret.LocalData.getInstance().getRoleBornPointLo(lo.roleBornPointId));
                    }
                }
                //超出2个场景时，需要计算第2个场景中出生点和通往第3个场景的传送点的最短路径出生点和传送点
                if (lastNetItem) {
                    var length3 = nextNetItem.enterPoints.length;
                    for (var i3 = 0; i3 < length3; i3++) {
                        lo = nextNetItem.enterPoints[i3];
                        if (lo.entryId == lastNetItem.id) {
                            nextEPs.push(lo);
                        }
                    }
                    var distance = 0;
                    var min = Number.POSITIVE_INFINITY;
                    //找出最短路径出生点和传送点
                    var length4 = nextBPs.length;
                    for (var i4 = 0; i4 < length4; i4++) {
                        var rbpLo = nextBPs[i4];
                        var length5 = nextEPs.length;
                        for (var i5 = 0; i5 < length5; i5++) {
                            lo = nextEPs[i5];
                            distance = egret.Point.distance(lo.point, rbpLo.point);
                            if (distance < min) {
                                //出生点
                                minArray[0] = rbpLo;
                                //传送点
                                minArray[1] = lo;
                                min = distance;
                            }
                        }
                    }
                    //当前场景传送点
                    var length6 = currentEPs.length;
                    for (var i6 = 0; i6 < length6; i6++) {
                        lo = currentEPs[i6];
                        if (lo.roleBornPointId == minArray[0].id) {
                            naviItem = new egret.SceneNavigatorDataItem();
                            naviItem.sceneId = currentNetItem.id;
                            naviItem.elementId = lo.id;
                            result.push(naviItem);
                            break;
                        }
                    }
                    //下一场景传送点
                    naviItem = new egret.SceneNavigatorDataItem();
                    naviItem.sceneId = nextNetItem.id;
                    naviItem.elementId = minArray[1].id;
                    result.push(naviItem);
                    //每取出2个场景的路径，i 要增加
                    i++;
                }
                else {
                    isEnd = true;
                }
            }
            var hasCoor = false;
            if (eleLo) {
                var point = eleLo.point;
            }
            else {
                if (x != -1 && y != -1) {
                    var xx = x;
                    var yy = y;
                    hasCoor = true;
                }
                else if (isEnd && nextBPs[0]) {
                    //没有目标元素和坐标点时，取场景的出生点
                    xx = nextBPs[0].point.x;
                    yy = nextBPs[0].point.y;
                    hasCoor = true;
                }
                point = new egret.Point(xx, yy);
            }
            //剩余最后一个场景时
            if (isEnd) {
                distance = 0;
                min = Number.POSITIVE_INFINITY;
                //取出距离目标点最近的出生点
                var length7 = nextBPs.length;
                for (var i7 = 0; i7 < length7; i7++) {
                    rbpLo = nextBPs[i7];
                    distance = egret.Point.distance(point, rbpLo.point);
                    if (distance < min) {
                        minArray[0] = rbpLo;
                        min = distance;
                    }
                }
                //取出到达最后一个出生点传送点
                var length8 = currentEPs.length;
                for (var i8 = 0; i8 < length8; i8++) {
                    lo = currentEPs[i8];
                    if (lo.roleBornPointId == minArray[0].id) {
                        naviItem = new egret.SceneNavigatorDataItem();
                        naviItem.sceneId = currentNetItem.id;
                        naviItem.elementId = lo.id;
                        result.push(naviItem);
                        break;
                    }
                }
            }
            //目标点
            naviItem = new egret.SceneNavigatorDataItem();
            naviItem.sceneId = sceneId;
            if (eleLo) {
                naviItem.elementId = elementId;
                result.push(naviItem);
            }
            else if (hasCoor) {
                naviItem.x = xx;
                naviItem.y = yy;
                result.push(naviItem);
            }
            return result;
        };
        //
        /**
         * 清空场景数据
         *
         */
        __egretProto__.clearData = function () {
            this.dynamicElementsMap.clear();
        };
        //
        /**
         * 构建场景树结构
         *
         */
        __egretProto__.buildFixedMap = function () {
            var map = egret.LocalData.getInstance().getHashMap(egret.LocalDataFileName.SCENE);
            var names = [
                egret.LocalDataFileName.NPC,
                egret.LocalDataFileName.ROLE_BORN_POINT
            ];
            var types = [
                egret.SceneElementType.NPC,
                egret.SceneElementType.ROLE_BORN_POINT
            ];
            //分场景
            var sceneMap = null;
            var netItem = null;
            var length1 = map.content.length;
            for (var i1 = 0; i1 < length1; i1++) {
                var sceneLo = map.content[i1];
                sceneMap = new egret.HashMap();
                this._fixedElementMap.put(sceneLo.id, sceneMap);
                netItem = new egret.SceneNetDataItem();
                netItem.id = sceneLo.id;
                this._netMap.put(sceneLo.id, netItem);
                var length2 = types.length;
                for (var i2 = 0; i2 < length2; i2++) {
                    var type = types[i2];
                    sceneMap.put(type, new egret.HashMap());
                }
            }
            for (var i in names) {
                this.buildMap(names[i], types[i]);
            }
            //构建场景传送网络
            //			var loMap:HashMap = LocalData.getInstance().getHashMap(LocalDataFileName.ENTER_POINT);
            //			var entryItem:SceneNetDataItem = null;
            //			
            //			for each(var lo:EntryPointLo in loMap.content){
            //				netItem = _netMap.get(lo.sceneId);
            //				entryItem = _netMap.get(lo.entryId);
            //				
            //				if(netItem.entrySceneItems.indexOf(entryItem) == -1)
            //					netItem.entrySceneItems.push(entryItem);
            //				netItem.enterPoints.push(lo);
            //			}
        };
        //
        /**
         * 构建指定表元素
         * @param fileName
         * @param type
         *
         */
        __egretProto__.buildMap = function (fileName, type) {
            if (type === void 0) { type = 0; }
            var loMap = egret.LocalData.getInstance().getHashMap(fileName);
            var map = null;
            var eleMap = null;
            var length = loMap.content.length;
            for (var i = 0; i < length; i++) {
                var lo = loMap.content[i];
                map = this._fixedElementMap.get(lo.sceneId);
                eleMap = map.get(type);
                eleMap.put(lo.id, lo);
                if (this._fixedEleIdMap.containsKey(lo.id)) {
                    egret.LogManager.error(this, "固定场景元素id重复: fileName = " + fileName + ",type = " + type + ",id = " + lo.id);
                }
                else {
                    this._fixedEleIdMap.put(lo.id, lo);
                }
            }
        };
        //
        /**
         * 获取场景传送点基础数据
         * @param sceneId:int 传送点所在场景基础 id
         * @param entryId:int 传送点传送的场景基础 id
         * @return
         *
         */
        __egretProto__.getEntryPointLoBySceneId = function (sceneId, entryId) {
            if (entryId === void 0) { entryId = 0; }
            var map = egret.LocalData.getInstance().getHashMap(egret.LocalDataFileName.ENTER_POINT);
            var length = map.content.length;
            for (var i = 0; i < length; i++) {
                var lo = map.content[i];
                if (lo.sceneId == sceneId && lo.entryId == entryId) {
                    return lo;
                }
            }
            egret.LogManager.error(this, "找不到场景传送点数据: sceneId = " + sceneId + ", entryId = " + entryId);
            return null;
        };
        //
        /**
         * 通过固定场景元素id获取场景id
         * @param elementId:int 固定场景元素id
         * @return
         *
         */
        __egretProto__.getSceneIdByElement = function (elementId) {
            if (elementId === void 0) { elementId = 0; }
            var lo = this.getFixedElementLoById(elementId);
            if (lo)
                return lo.sceneId;
            egret.LogManager.error(this, "找不到场景id: elementId = " + elementId);
            return 0;
        };
        //
        /**
         * 获取指定城市中的 npc 数据
         * @param cityId:int = -1 城市 id
         * @return
         *
         */
        __egretProto__.getCityNpcs = function (cityId) {
            if (cityId === void 0) { cityId = -1; }
            if (cityId == -1)
                cityId = this.cityId;
            var hashMap = egret.LocalData.getInstance().getHashMap(egret.LocalDataFileName.NPC);
            var array = [];
            var length = hashMap.content.length;
            for (var i = 0; i < length; i++) {
                var lo = hashMap.content[i];
                if (lo.sceneId == cityId) {
                    array.push(lo);
                }
            }
            return array;
        };
        return SceneData;
    })();
    egret.SceneData = SceneData;
    SceneData.prototype.__class__ = "egret.SceneData";
})(egret || (egret = {}));
//# sourceMappingURL=SceneData.js.map