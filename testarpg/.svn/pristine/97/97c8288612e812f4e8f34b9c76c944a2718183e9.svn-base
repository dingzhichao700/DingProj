module egret{
    /**
     * 战士
     */
    export class PlayerWarrior extends ElementPlayer{
        //野蛮冲撞目标点
        private _collidePoint:Point = new Point();

        public constructor(){
            super();
        }
        //
        /**
         * 获取攻击范围，不同职业和怪物重写
         * @returns {number}
         */
        public getAttackRange():number{
            return 150;
        }
        //
        /**
         * 玩家攻击方法
         */
        public attack():void{
            if(!this._attackTarget) return;

            this.stopMove();

            if(this.getSkillTime(SkillType.WARRIOR_COLLIDE) > dataManager().fightData.getSkillIntervalTime(SkillType.WARRIOR_COLLIDE)){
                this.setSkillTime(SkillType.WARRIOR_COLLIDE);

                var radian:number = Math.atan2(this._attackTarget.vo.y - this._y,this._attackTarget.vo.x - this._x);
                var radius:number = 300;
                var x:number = this._x + Math.cos(radian) * radius;
                var y:number = this._y + Math.sin(radian) * radius;
                x = this.limitValue(x,0,this._maxX);
                y = this.limitValue(y,0,this._maxY);

                var time:number = 500;

                var target:SceneElementDriver = <SceneElementDriver>this.scene.getElement(this._attackTarget.vo.idString);
                Tween.get(target).to({x:x,y:y},time).call(this.collideComplete,this,[target,x,y]);

                this.play(-1,ActionType.WALK);

                radius -= this.getAttackRange();
                x = this._x + Math.cos(radian) * radius;
                y = this._y + Math.sin(radian) * radius;
                x = this.limitValue(x,0,this._maxX);
                y = this.limitValue(y,0,this._maxY);

                Tween.get(this).to({x:x,y:y},time + 10).call(this.collideComplete,this,[this,x,y]);

                this.damage();

                return;
            }

            if(this._avatar.actionType != ActionType.ATTACK){
                var direction:number = ActionMovieClipData.getInstance().calculateDirection(this.x,this.y,this._attackTarget.vo.x,this._attackTarget.vo.y);
                this.play(0,ActionType.ATTACK,direction);
                this._avatar.setFrameHandler(this.playSkill,this);
            }
        }
        //
        private collideComplete(element:SceneElementDriver,x:number,y:number):void{
            element.setXY(x,y);

            if(element == this){
                if(this._attackTarget && (<SceneDriverVo>this._attackTarget.vo).hp <= 0){
                    this.checkAutoAttack2();
                }else{
                    this.attack();
                }
            }
        }
        //
        /**
         * 释放技能
         */
        public playSkill():void {
            if (!this.scene) return;

            //职业及技能类型处理
            var playerVo:ScenePlayerVo = <ScenePlayerVo>this.data.vo;

            if(this._avatar.frameIndex == 6){
                var skill:ElementSkill = <ElementSkill>SceneElementManager.getInstance().getElement(ElementSkill);
                skill.setMovieName(SceneElementData.getInstance().getSkillMovieName(playerVo.vocation,1));
                this.scene.addElement(skill,SceneLayerType.BATTLE_EFFECT,this.x,this.y);
                skill.direction = this.direction;

                this.damage();

            }else if(this._avatar.frameIndex == this._avatar.frameIndexMax){
                this.checkAutoAttack2();
            }
        }
    }
}