
module egret {

	export class SceneElementDriver extends SceneElementMover{
		/**
		 * 敌人数据
		 */
		public armies:Array<SceneElementDataItem>;
		//攻击目标
		public _attackTarget:SceneElementDataItem;
		/**
		 * 追击目标到达攻击范围时处理 function(target:SceneElementDataItem)
		 */
		public _chaseArriveItem:ScriptItem;
		private _chaseId:number;
		//血条
		private _hpBar:HPBar;
		/**
		 * 构造函数
		 */
		public constructor(){
			super();

			this._hpBar = new egret.HPBar();
			this._namePad.show(this._hpBar,-1);
		}
		//
		public update():void{
			super.update();
		}
		//
		public addToScene():void{
			super.addToScene();

			this.updateHp();
		}
		//
		/**
		 * 更新血量显示
		 */
		public updateHp():void{
			var vo:SceneDriverVo = <SceneDriverVo>this._data.vo;
			this._hpBar.setProperty(vo.hp + "",vo.hp / vo.hpTotal);
		}
		/**
		 * 按指定动作类型和方向播放影片
		 * @param frameIndex:int = -1 开始播放的帧索引，-1时不设置开始播放的帧索引，从当前帧开始播放或从第0帧开始播放
		 * @param actionType:int = -1 动作类型，-1时不设置
		 * @param direction:int = -1 动作方向，-1时不设置
		 * @param loopCount:int = 0  播放循环次数，播放至最后一帧时即算循环了一次，0表示无限循环
		 * @param callBack:Function = null 设置播放次数时，播放完成后回调，仅执行一次
		 * @param thisObj:any = null 播放完成后回调函数所属对象
		 * @param startFun:Function = null 循环播放中开始播放时回调函数，每次循环执行一次
		 * @param startObj:any = null startFun回调函数所属对象
		 */
		public play(frameIndex:number = -1,actionType:number = -1,direction:number = -1,loopCount:number = 0,callBack:Function = null,thisObj:any = null,startFun:Function = null,startObj:any = null):void{
			super.play.apply(this,arguments);

			this.attackFinish();
		}
		/**
		 * 从场景移除时处理 
		 * 
		 */		
		public removeFromScene():void{
			super.removeFromScene();

			this.attackFinish();
		}
		//
		/**
		 * 追击目标到达攻击范围时处理
		 * @param fun 回调函数 function(target:SceneElementDataItem) target:攻击目标
		 * @param target 回调函数所属对象
		 */
		public setChaseArriveHandler(fun:Function,target:any):void{
			if(!this._chaseArriveItem){
				this._chaseArriveItem = new egret.ScriptItem();
			}

			this._chaseArriveItem.execute = fun;
			this._chaseArriveItem.target = target;
		}
		//
		/**
		 * 追击敌人
		 * @param armies
		 */
		public chaseArmies(armies:Array<SceneElementDataItem>):void{
			this.armies = armies;

			if(this.armies){
				var max:number = 100000;
				var distance:number;
				var target:SceneElementDataItem;
				var x:number = this.x;
				var y:number = this.y;

				for(var i in this.armies){
					var vo:SceneElementVo = this.armies[i].vo;
					distance = DimensionUtil.distance2(x,y,vo.x,vo.y);

					if(distance < max){
						distance = max;

						target = this.armies[i];
					}
				}

				if(target){
					this._attackTarget = target;
					if(!this.checkChaseArrive()){
						this.moveTo2(vo.x,vo.y);

						if(!EnterFrameManager.getInstance().hasExecute(this._chaseId)){
							this._chaseId = EnterFrameManager.getInstance().addExecute(this.checkChaseArrive,this,6);
						}
					}
				}
			}
		}
		//
		/**
		 * 检测是否已到达攻击目标周围
		 */
		public checkChaseArrive():boolean{
			if(!this._attackTarget) return false;

			var distance:number = DimensionUtil.distance2(this.x,this.y,this._attackTarget.vo.x,this._attackTarget.vo.y);

			if(distance < this.getAttackRange()){
				EnterFrameManager.getInstance().removeExecute(this._chaseId);

				this.stopMove();
				this.attack();

				if(this._chaseArriveItem){
					this._chaseArriveItem.params = [this._attackTarget];
					this._chaseArriveItem.apply();
				}

				return true;
			}else{
				this.moveTo2(this._attackTarget.vo.x,this._attackTarget.vo.y);
			}

			return false;
		}
		//
		/**
		 * 获取攻击范围，不同职业和怪物重写
		 * @returns {number}
		 */
		public getAttackRange():number{
			return 150;
		}
		//
		/**
		 * 默认攻击方法，不同职业和怪物重写
		 */
		public attack():void{
			if(this._attackTarget){
				var direction:number = ActionMovieClipData.getInstance().calculateDirection(this.x,this.y,this._attackTarget.vo.x,this._attackTarget.vo.y);
				this.play(0,ActionType.ATTACK,direction);
				this._avatar.setFrameHandler(this.playSkill,this);
			}
		}
		//
		/**
		 * 结束攻击，用于清理攻击相关数据和回调
		 */
		public attackFinish():void{
			this._avatar.setFrameHandler(null);
		}
		//
		/**
		 * 释放默认技能
		 */
		public playSkill():void{

		}
	}
}