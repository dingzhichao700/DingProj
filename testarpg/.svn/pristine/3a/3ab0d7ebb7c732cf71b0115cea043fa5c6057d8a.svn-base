var egret;
(function (egret) {
    var SceneWindow = (function (_super) {
        __extends(SceneWindow, _super);
        /**
         * 构造函数
         */
        function SceneWindow() {
            _super.call(this);
            //场景数据
            this._sceneData = null;
            //场景元素数据
            this._sceneElementData = null;
            //元素管理器
            this._sceneElementManager = null;
            this._sceneData = egret.dataManager().sceneData;
            this._sceneElementData = egret.dataManager().sceneElementData;
            this._sceneElementManager = egret.SceneElementManager.getInstance();
            this._elementRadius = egret.SceneElementData.ARRIVE_ELEMENT_RADIUS;
        }
        var __egretProto__ = SceneWindow.prototype;
        __egretProto__.initWindow = function () {
            _super.prototype.initWindow.call(this);
            this.addUpdateType(egret.UpdateType.PLAYER_EXIT_SCENE, egret.UpdateType.PLAYER_ENTER_SCENE, egret.UpdateType.PLAYER_VO_CHANGED);
        };
        __egretProto__.initData = function (data) {
            _super.prototype.initData.call(this, data);
            if (this._sceneData.isChanged) {
                this._sceneData.isChanged = false;
                var sceneLo = egret.LocalData.getInstance().getSceneLo(this._sceneData.cityId);
                var id = sceneLo.bornPoint;
                var lo = egret.LocalData.getInstance().getRoleBornPointLo(id);
                if (lo) {
                    this.gotoXY(lo.point.x, lo.point.y);
                }
            }
            else {
                //this.gotoXY(this._role.x,this._role.y);
                this.gotoXY(300, 300);
            }
        };
        __egretProto__.addEvents = function () {
            _super.prototype.addEvents.call(this);
            this.addEventListener(egret.SceneEvent.SCENE_ARRIVE_NAVI_POINT, this.sceneArriveNiviPoint, this);
        };
        __egretProto__.remove = function () {
            _super.prototype.remove.call(this);
            this.removeEventListener(egret.SceneEvent.SCENE_ARRIVE_NAVI_POINT, this.sceneArriveNiviPoint, this);
        };
        __egretProto__.globalUpdate = function (updateType) {
            var parameters = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                parameters[_i - 1] = arguments[_i];
            }
            switch (updateType) {
                case egret.UpdateType.PLAYER_EXIT_SCENE:
                    this.removePlayer(parameters[0]);
                    break;
                case egret.UpdateType.PLAYER_ENTER_SCENE:
                    this.renderElement(parameters[0]);
                    break;
                case egret.UpdateType.PLAYER_VO_CHANGED:
                    break;
            }
        };
        //
        /**
         * 跨场景导航
         * @param sceneId:Number = -1 场景id，指定此参数时，elementId参数无效，可指定x,y
         * @param elementId:Number = -1 目标场景元素id，为场景固定元素id，指定此参数场景id使用-1才有效，已指定此参数时后面的参数无效
         * @param x:Number = -1 目标场景x
         * @param y:Number = -1 目标场景y
         *
         */
        __egretProto__.navigate = function (sceneId, elementId, x, y) {
            if (sceneId === void 0) { sceneId = -1; }
            if (elementId === void 0) { elementId = -1; }
            if (x === void 0) { x = -1; }
            if (y === void 0) { y = -1; }
            if (sceneId == -1 || sceneId == this._sceneData.cityId) {
                if (elementId > -1) {
                    this.navigateToElement(elementId);
                }
                else if (x > -1 && y > -1) {
                    this.navigateTo(x, y);
                }
            }
            else {
            }
        };
        //
        /**
         * 移除一个玩家
         * @param id
         *
         */
        __egretProto__.removePlayer = function (id) {
            this.removeElementById(id);
        };
        //
        /**
         * 清空场景
         *
         */
        __egretProto__.clearScene = function () {
            _super.prototype.clearScene.call(this);
            if (this._role)
                (this._role).changeScene(this);
        };
        /**
         * 更新 npc 状态
         *
         */
        __egretProto__.updateNpcState = function () {
            var length = this._biologyMap.length;
            for (var i = 0; i < length; i++) {
                var ele = this._biologyMap[i];
                if (ele instanceof egret.ElementNpc) {
                    ele.update();
                }
            }
        };
        /**
         * 到达导航点事件处理
         * @param event
         *
         */
        __egretProto__.sceneArriveNiviPoint = function (event) {
            var item = (event.data);
            if (item) {
                //固定场景元素
                if (item.elementId > 0) {
                }
                else if (item.sceneId > 0) {
                }
            }
        };
        //
        /**
         * 获取场景元素坐标点
         * @return
         *
         */
        __egretProto__.getElementPoint = function (id) {
            return this._sceneData.getElementPoint(id);
        };
        //
        /**
         * 获取场景元素速度
         * @return
         *
         */
        __egretProto__.getElementSpeed = function () {
            return this._sceneElementData.getElementSpeed();
        };
        //
        /**
         * 回收场景元素
         * @param element:SceneElement 场景元素
         *
         */
        __egretProto__.recoverElement = function (element) {
            if (this._mousePoint && element == this._mousePoint) {
                this.removeElement(this._mousePoint, false);
            }
            else {
                element.visible = true;
                this._sceneElementManager.recoverElement(element);
                if (element instanceof egret.ElementNpc) {
                    element.setTextFormat();
                    element.enabled = true;
                }
            }
        };
        //
        /**
         * 场景元素移动结束
         * @param target:SceneElement 场景元素
         *
         */
        __egretProto__.elementMovingEnd = function (target) {
            if (target == this._role) {
                /*var entryLo:EntryPointLo = dataManager().sceneData.checkEntryPoint(_role.x,_role.y);
                if(entryLo){
                    //改为移动返回后进入传送场景
                    //					sendData(ModuleNumber.SCENE,SceneCommand.ENTER_SCENE,{id:entryLo.entryId},entryLo.roleBornPointId);
                    //					SceneManager.getInstance().enterScene(entryLo.entryId);
                    //					SceneManager.getInstance().gotoRoleBornPoint(entryLo.roleBornPointId);
                }else */
                if (this._currentNaviItem) {
                    //调度导航事件
                    this.checkArriveNaviPoint();
                }
                //				sendData(ModuleNumber.SCENE,SceneCommand.MOVING,{x:_role.x,y:_role.y},null,false);
                this.hideMousePoint();
            }
            else {
                var item = target.data;
                if (!this.isInRenderRect(item.vo.x, item.vo.y)) {
                    this.removeElementById(item.vo.idString);
                }
            }
        };
        //
        /**
         * 静态场景元素渲染
         * @param rect:Rectangle 渲染区域
         *
         */
        __egretProto__.renderFixedElements = function (rect) {
            var vo = null;
            var eleMap = this.getFixedElementMap();
            var subMap = null;
            if (eleMap) {
                for (var type in eleMap.content) {
                    subMap = eleMap.get(type);
                    var length = subMap.size();
                    for (var i = 0; i < length; i++) {
                        var lo = subMap.content[i];
                        if (rect.containsPoint(lo.point)) {
                            this.renderElementInternal(type, lo.idString, lo.point.x, lo.point.y, lo);
                        }
                        else {
                            this.removeElementById(lo.idString);
                        }
                    }
                }
            }
        };
        //
        /**
         * 渲染动态场景元素
         *
         */
        __egretProto__.renderDynamicElements = function (rect) {
            var vo = null;
            var lo = null;
            var x = 0;
            var y = 0;
            var id = null;
            var mover = null;
            //动态场景元素渲染
            var length = this._sceneData.dynamicElementsMap.content.length;
            for (var i = 0; i < length; i++) {
                var item = this._sceneData.dynamicElementsMap.content[i];
                vo = item.vo;
                lo = item.lo;
                x = vo.x;
                y = vo.y;
                if (rect.contains(x, y)) {
                    this.renderElementInternal(egret.SceneElementType.PLAYER, vo.idString, x, y, lo, vo);
                }
                else {
                    id = vo.idString;
                    mover = this._elementsIdMap.get(id);
                }
            }
        };
        //
        /**
         * 不动的场景元素数据表
         * @return
         *
         */
        __egretProto__.getFixedElementMap = function () {
            return this._sceneData.getFixedElementMap();
        };
        //
        /**
         * 移动场景元素
         * @param id:String 元素id(lo或vo的id)
         * @param x:int
         * @param y:int
         *
         */
        __egretProto__.moveElement = function (id, x, y) {
            if (y === void 0) { y = 0; }
            var item = this._sceneData.getElementDataItem(id);
            if (!item)
                return;
            //暂时处理，此处需要处理，当地图数据未加载完成时有玩家移动的处理
            if (this._isoMap.mapNodes.length == 0) {
                //未在渲染区域时直接更新数据，实时性不强
                this._sceneData.updateSceneElementVo(item, ["x", "y"], [x, y]);
                return;
            }
            if (this.isInRenderRect(x, y) || this.isInRenderRect(item.vo.x, item.vo.y)) {
                this.renderElement(item);
                _super.prototype.moveElement.call(this, item.vo.idString, x, y);
            }
            else {
                //未在渲染区域时直接更新数据，实时性不强
                this._sceneData.updateSceneElementVo(item, ["x", "y"], [x, y]);
            }
        };
        //
        /**
         * 根据数据项目渲染场景元素
         * @param item:SceneElementDataItem 场景元素数据项目
         *
         */
        __egretProto__.renderElement = function (item) {
            if (this._elementsIdMap.containsKey(item.vo.idString))
                return;
            var rect = this._isoMap.renderRect;
            var vo = null;
            var lo = null;
            vo = item.vo;
            lo = item.lo;
            this.renderElementInternal(egret.SceneElementType.PLAYER, vo.idString, vo.x, vo.y, lo, vo);
        };
        //
        /**
         * 渲染场景元素
         * @param type:int 场景类型 SceneElementType
         * @param id:String vo或lo中的id
         * @param x:Number = NaN x坐标，不为NaN时设置
         * @param y:Number = NaN y坐标，不为NaN时设置
         * @param lo:SceneElementLo = null 场景元素 lo
         * @param vo:SceneElementVo = null 场景元素 vo
         * @return
         *
         */
        __egretProto__.renderElementInternal = function (type, id, x, y, lo, vo) {
            if (x === void 0) { x = NaN; }
            if (y === void 0) { y = NaN; }
            if (lo === void 0) { lo = null; }
            if (vo === void 0) { vo = null; }
            if (this._elementsIdMap.containsKey(id))
                return null;
            var element = null;
            switch (type) {
                case egret.SceneElementType.NPC:
                    element = this._sceneElementManager.getElement(egret.ElementNpc);
                    break;
                case egret.SceneElementType.ENTRY_POINT:
                    element = this._sceneElementManager.getElement(egret.ElementEntryPoint);
                    break;
                case egret.SceneElementType.PLAYER:
                    element = this._sceneElementManager.getElement(egret.ElementPlayer);
                    element.visible = this._sceneData.playerVisible;
                    break;
            }
            if (element) {
                element.setData(vo, lo);
                this.addElement(element, egret.SceneLayerType.BIOLOGY, x, y);
            }
            return element;
        };
        //
        /**
         * 点击场景元素
         * @param target:SceneElement 场景元素
         *
         */
        __egretProto__.clickElement = function (target) {
            if (target instanceof egret.ElementPlayer) {
                if (this._role)
                    this.navigateTo(target.x, target.y);
            }
            else if (target instanceof egret.ElementPet) {
                if (this._role)
                    this.navigateTo(target.x, target.y);
            }
            else {
                var id = (target.id);
                this._currentNaviItem = new egret.SceneNavigatorDataItem();
                this._currentNaviItem.elementId = id;
                if (this.checkArriveNaviPoint((target.id))) {
                    return;
                }
                else {
                    this.navigateToElement(this._currentNaviItem.elementId);
                }
            }
        };
        //
        /**
         * 主角移动
         *
         */
        __egretProto__.roleMoving = function () {
            _super.prototype.roleMoving.call(this);
        };
        /**
         * 玩家主动开始移动
         */
        __egretProto__.startMove = function () {
            _super.prototype.startMove.call(this);
            //sendData(ModuleNumber.SCENE,SceneCommand.MOVING,{x:this._role.finalX,y:this._role.finalY},null,false);
        };
        //
        /**
         * 导航至当前场景中的坐标
         * @param x:Number
         * @param y:Number
         *
         */
        __egretProto__.navigateTo = function (x, y) {
            if (this.checkArriveNaviPoint())
                return;
            _super.prototype.navigateTo.call(this, x, y);
            //this.sendData(ModuleNumber.SCENE,SceneCommand.MOVING,{x:x,y:y},null,false);
        };
        //
        /**
         * 导航至当前场景中的元素，元素可以是非固定场景元素
         * @param id:Number 元素lo或vo中的id
         *
         */
        __egretProto__.navigateToElement = function (id) {
            if (!this._currentNaviItem) {
                this._currentNaviItem = new egret.SceneNavigatorDataItem();
                this._currentNaviItem.elementId = id;
            }
            var point = this.getElementPoint(id + "");
            //使到达元素周围，随机散开
            var x = point.x + Math.random() * egret.SceneElementData.ARRIVE_ELEMENT_RADIUS / 2 - egret.SceneElementData.ARRIVE_ELEMENT_RADIUS / 4;
            var y = point.y + Math.random() * egret.SceneElementData.ARRIVE_ELEMENT_RADIUS / 2 - egret.SceneElementData.ARRIVE_ELEMENT_RADIUS / 4;
            this.navigateTo(x, y);
        };
        return SceneWindow;
    })(egret.SceneDriver);
    egret.SceneWindow = SceneWindow;
    SceneWindow.prototype.__class__ = "egret.SceneWindow";
})(egret || (egret = {}));
//# sourceMappingURL=SceneWindow.js.map